{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task\\\\MovieTicketApp\\\\movie\\\\src\\\\components\\\\Movies\\\\Movies.js\",\n  _s = $RefreshSig$();\nimport { Box, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { getAllMovies } from \"../../api-helpers/api-helpers\";\nimport MovieItem from \"./MovieItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Movies = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getAllMovies().then(data => setMovies(data.movies)).catch(err => {\n      console.log(err);\n      setError(\"Failed to fetch movies. Please try again later.\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    margin: \"auto\",\n    marginTop: 4,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      margin: \"auto\",\n      variant: \"h4\",\n      padding: 2,\n      width: \"40%\",\n      bgcolor: \"#900C3F\",\n      color: \"white\",\n      textAlign: \"center\",\n      children: \"All Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      width: \"100%\",\n      margin: \"auto\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"wrap\",\n      children: error ? /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : movies.map(movie => /*#__PURE__*/_jsxDEV(MovieItem, {\n        id: movie.id,\n        posterUrl: movie.posterUrl,\n        releaseDate: movie.releaseDate,\n        title: movie.title\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(Movies, \"/oiihY625Ce2rW4TtQJCK1P9yC8=\");\n_c = Movies;\nvar _c;\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["Box","Typography","React","useEffect","useState","getAllMovies","MovieItem","jsxDEV","_jsxDEV","Movies","_s","movies","setMovies","error","setError","then","data","catch","err","console","log","margin","marginTop","children","variant","padding","width","bgcolor","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","flexWrap","map","movie","id","posterUrl","releaseDate","title","_c","$RefreshReg$"],"sources":["D:/Task/MovieTicketApp/movie/src/components/Movies/Movies.js"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getAllMovies } from \"../../api-helpers/api-helpers\";\r\nimport MovieItem from \"./MovieItem\";\r\n\r\nexport const Movies = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getAllMovies()\r\n      .then((data) => setMovies(data.movies))\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setError(\"Failed to fetch movies. Please try again later.\");\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Box margin={\"auto\"} marginTop={4}>\r\n      <Typography\r\n        margin=\"auto\"\r\n        variant=\"h4\"\r\n        padding={2}\r\n        width={\"40%\"}\r\n        bgcolor={\"#900C3F\"}\r\n        color={\"white\"}\r\n        textAlign={\"center\"}\r\n      >\r\n        All Movies\r\n      </Typography>\r\n      <Box\r\n        width={\"100%\"}\r\n        margin={\"auto\"}\r\n        display={\"flex\"}\r\n        justifyContent={\"center\"}\r\n        flexWrap={\"wrap\"}\r\n      >\r\n        {error ? (\r\n          <Typography color=\"error\">{error}</Typography>\r\n        ) : (\r\n          movies.map((movie) => (\r\n            <MovieItem\r\n              key={movie.id}\r\n              id={movie.id}\r\n              posterUrl={movie.posterUrl}\r\n              releaseDate={movie.releaseDate}\r\n              title={movie.title}\r\n            />\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAC/C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdE,YAAY,CAAC,CAAC,CACXU,IAAI,CAAEC,IAAI,IAAKJ,SAAS,CAACI,IAAI,CAACL,MAAM,CAAC,CAAC,CACtCM,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBJ,QAAQ,CAAC,iDAAiD,CAAC;IAC7D,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA,CAACR,GAAG;IAACqB,MAAM,EAAE,MAAO;IAACC,SAAS,EAAE,CAAE;IAAAC,QAAA,gBAChCf,OAAA,CAACP,UAAU;MACToB,MAAM,EAAC,MAAM;MACbG,OAAO,EAAC,IAAI;MACZC,OAAO,EAAE,CAAE;MACXC,KAAK,EAAE,KAAM;MACbC,OAAO,EAAE,SAAU;MACnBC,KAAK,EAAE,OAAQ;MACfC,SAAS,EAAE,QAAS;MAAAN,QAAA,EACrB;IAED;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbzB,OAAA,CAACR,GAAG;MACF0B,KAAK,EAAE,MAAO;MACdL,MAAM,EAAE,MAAO;MACfa,OAAO,EAAE,MAAO;MAChBC,cAAc,EAAE,QAAS;MACzBC,QAAQ,EAAE,MAAO;MAAAb,QAAA,EAEhBV,KAAK,gBACJL,OAAA,CAACP,UAAU;QAAC2B,KAAK,EAAC,OAAO;QAAAL,QAAA,EAAEV;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,GAE9CtB,MAAM,CAAC0B,GAAG,CAAEC,KAAK,iBACf9B,OAAA,CAACF,SAAS;QAERiC,EAAE,EAAED,KAAK,CAACC,EAAG;QACbC,SAAS,EAAEF,KAAK,CAACE,SAAU;QAC3BC,WAAW,EAAEH,KAAK,CAACG,WAAY;QAC/BC,KAAK,EAAEJ,KAAK,CAACI;MAAM,GAJdJ,KAAK,CAACC,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACF;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDWD,MAAM;AAAAkC,EAAA,GAANlC,MAAM;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}